<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–∞–π–º–µ—Ä—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f9f0ff 0%, #e6f0ff 100%);
            min-height: 100vh;
            padding: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            touch-action: pan-y;
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
            width: 100%;
        }

        h1 {
            color: #8a2be2;
            font-size: 1.6rem;
            margin-bottom: 8px;
        }

        .subtitle {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .drag-info {
            color: #8a2be2;
            font-size: 0.8rem;
            background: rgba(138, 43, 226, 0.1);
            padding: 8px 12px;
            border-radius: 20px;
            margin-top: 5px;
        }

        .timers-container {
            display: flex;
            flex-direction: column;
            gap: 12px;
            width: 100%;
            max-width: 400px;
        }

        .timer-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            padding: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            position: relative;
            user-select: none;
        }

        .timer-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
        }

        .timer-card.dragging {
            opacity: 0.8;
            transform: rotate(3deg) scale(1.02);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }

        .timer-card.placeholder {
            background: rgba(138, 43, 226, 0.05);
            border: 2px dashed #8a2be2;
            opacity: 0.6;
        }

        .drag-handle {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 24px;
            height: 24px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            cursor: grab;
            opacity: 0.5;
            transition: opacity 0.2s;
        }

        .drag-handle:hover {
            opacity: 1;
        }

        .drag-dot {
            width: 4px;
            height: 4px;
            background: #8a2be2;
            border-radius: 50%;
            margin: 1px 0;
        }

        .timer-title {
            font-size: 0.9rem;
            color: #8a2be2;
            margin-bottom: 12px;
            text-align: center;
            font-weight: 600;
            padding: 0 20px;
        }

        .timer-display {
            font-size: 1.8rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 12px;
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            padding: 8px 12px;
            border-radius: 8px;
            width: 100%;
            text-align: center;
        }

        .timer-controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 6px;
            width: 100%;
        }

        button {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.8rem;
            flex-grow: 1;
        }

        .start-btn {
            background-color: #4CAF50;
            color: white;
        }

        .start-btn:hover {
            background-color: #45a049;
        }

        .stop-btn {
            background-color: #f44336;
            color: white;
        }

        .stop-btn:hover {
            background-color: #d32f2f;
        }

        .reset-btn {
            background-color: #2196F3;
            color: white;
        }

        .reset-btn:hover {
            background-color: #0b7dda;
        }

        .hidden {
            display: none;
        }

        @media (min-width: 768px) {
            .timers-container {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 15px;
                max-width: 700px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .timer-display {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>–¢–∞–π–º–µ—Ä—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º</h1>
        <p class="subtitle">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä</p>
        <div class="drag-info">üí° –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–∞ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞</div>
    </div>

    <div class="timers-container" id="timersContainer">
        <!-- –¢–∞–π–º–µ—Ä 1 -->
        <div class="timer-card" data-id="1">
            <div class="drag-handle">
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
            </div>
            <div class="timer-title">–õ–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è —Ä–µ—Å–Ω–∏—Ü–∞</div>
            <div class="timer-display" id="timer1">00:00:00</div>
            <div class="timer-controls">
                <button class="start-btn" id="start1">–°—Ç–∞—Ä—Ç</button>
                <button class="stop-btn" id="stop1">–°—Ç–æ–ø</button>
                <button class="reset-btn hidden" id="reset1">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
            </div>
        </div>

        <!-- –¢–∞–π–º–µ—Ä 2 -->
        <div class="timer-card" data-id="2">
            <div class="drag-handle">
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
            </div>
            <div class="timer-title">–õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ä–µ—Å–Ω–∏—Ü–∞</div>
            <div class="timer-display" id="timer2">00:00:00</div>
            <div class="timer-controls">
                <button class="start-btn" id="start2">–°—Ç–∞—Ä—Ç</button>
                <button class="stop-btn" id="stop2">–°—Ç–æ–ø</button>
                <button class="reset-btn hidden" id="reset2">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
            </div>
        </div>

        <!-- –¢–∞–π–º–µ—Ä 3 -->
        <div class="timer-card" data-id="3">
            <div class="drag-handle">
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
            </div>
            <div class="timer-title">–ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è —Ä–µ—Å–Ω–∏—Ü–∞</div>
            <div class="timer-display" id="timer3">00:00:00</div>
            <div class="timer-controls">
                <button class="start-btn" id="start3">–°—Ç–∞—Ä—Ç</button>
                <button class="stop-btn" id="stop3">–°—Ç–æ–ø</button>
                <button class="reset-btn hidden" id="reset3">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
            </div>
        </div>

        <!-- –¢–∞–π–º–µ—Ä 4 -->
        <div class="timer-card" data-id="4">
            <div class="drag-handle">
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
            </div>
            <div class="timer-title">–ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ä–µ—Å–Ω–∏—Ü–∞</div>
            <div class="timer-display" id="timer4">00:00:00</div>
            <div class="timer-controls">
                <button class="start-btn" id="start4">–°—Ç–∞—Ä—Ç</button>
                <button class="stop-btn" id="stop4">–°—Ç–æ–ø</button>
                <button class="reset-btn hidden" id="reset4">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
            </div>
        </div>

        <!-- –¢–∞–π–º–µ—Ä 5 -->
        <div class="timer-card" data-id="5">
            <div class="drag-handle">
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
                <div class="drag-dot"></div>
            </div>
            <div class="timer-title">–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü</div>
            <div class="timer-display" id="timer5">00:00:00</div>
            <div class="timer-controls">
                <button class="start-btn" id="start5">–°—Ç–∞—Ä—Ç</button>
                <button class="stop-btn" id="stop5">–°—Ç–æ–ø</button>
                <button class="reset-btn hidden" id="reset5">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
            </div>
        </div>
    </div>

    <script>
        // –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
        class Timer {
            constructor(displayId, startBtnId, stopBtnId, resetBtnId, storageKey) {
                this.display = document.getElementById(displayId);
                this.startBtn = document.getElementById(startBtnId);
                this.stopBtn = document.getElementById(stopBtnId);
                this.resetBtn = document.getElementById(resetBtnId);
                this.storageKey = storageKey;
                
                this.seconds = 0;
                this.minutes = 0;
                this.hours = 0;
                this.interval = null;
                this.isRunning = false;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
                this.loadState();
                
                // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                this.startBtn.addEventListener('click', () => this.start());
                this.stopBtn.addEventListener('click', () => this.stop());
                this.resetBtn.addEventListener('click', () => this.reset());
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS
            formatTime() {
                return `${this.hours.toString().padStart(2, '0')}:${this.minutes.toString().padStart(2, '0')}:${this.seconds.toString().padStart(2, '0')}`;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            updateDisplay() {
                this.display.textContent = this.formatTime();
            }
            
            // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            start() {
                if (!this.isRunning) {
                    this.isRunning = true;
                    this.interval = setInterval(() => {
                        this.seconds++;
                        if (this.seconds === 60) {
                            this.seconds = 0;
                            this.minutes++;
                        }
                        if (this.minutes === 60) {
                            this.minutes = 0;
                            this.hours++;
                        }
                        this.updateDisplay();
                        this.saveState();
                    }, 1000);
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    this.resetBtn.classList.add('hidden');
                }
            }
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
            stop() {
                if (this.isRunning) {
                    this.isRunning = false;
                    clearInterval(this.interval);
                    this.saveState();
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    this.resetBtn.classList.remove('hidden');
                }
            }
            
            // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
            reset() {
                this.stop();
                this.seconds = 0;
                this.minutes = 0;
                this.hours = 0;
                this.updateDisplay();
                this.saveState();
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                this.resetBtn.classList.add('hidden');
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤ localStorage
            saveState() {
                const state = {
                    seconds: this.seconds,
                    minutes: this.minutes,
                    hours: this.hours,
                    isRunning: this.isRunning,
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    lastUpdate: Date.now()
                };
                localStorage.setItem(this.storageKey, JSON.stringify(state));
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –∏–∑ localStorage
            loadState() {
                const savedState = localStorage.getItem(this.storageKey);
                if (savedState) {
                    const state = JSON.parse(savedState);
                    
                    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
                    if (state.isRunning && state.lastUpdate) {
                        const elapsedSeconds = Math.floor((Date.now() - state.lastUpdate) / 1000);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É
                        let totalSeconds = state.seconds + 
                                         state.minutes * 60 + 
                                         state.hours * 3600 + 
                                         elapsedSeconds;
                        
                        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
                        this.hours = Math.floor(totalSeconds / 3600);
                        totalSeconds %= 3600;
                        this.minutes = Math.floor(totalSeconds / 60);
                        this.seconds = totalSeconds % 60;
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                        this.start();
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                        this.seconds = state.seconds;
                        this.minutes = state.minutes;
                        this.hours = state.hours;
                        this.isRunning = false;
                        
                        this.updateDisplay();
                        
                        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                        if (this.seconds > 0 || this.minutes > 0 || this.hours > 0) {
                            this.resetBtn.classList.remove('hidden');
                        }
                    }
                }
            }
        }

        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        class DragManager {
            constructor() {
                this.draggedItem = null;
                this.dragStartY = 0;
                this.dragOffsetY = 0;
                this.container = document.getElementById('timersContainer');
                this.timerCards = Array.from(this.container.querySelectorAll('.timer-card'));
                this.placeholder = null;
                this.currentDropIndex = -1;
                this.originalIndex = -1;
                
                this.init();
                this.loadOrder();
            }
            
            init() {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                this.timerCards.forEach(card => {
                    const handle = card.querySelector('.drag-handle');
                    
                    // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ handle
                    handle.addEventListener('mousedown', (e) => this.startDrag(e, card));
                    handle.addEventListener('touchstart', (e) => this.startDrag(e, card), { passive: false });
                    
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ handle
                    handle.addEventListener('click', (e) => e.stopPropagation());
                });
                
                // –°–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                document.addEventListener('mousemove', (e) => this.drag(e));
                document.addEventListener('touchmove', (e) => this.drag(e), { passive: false });
                document.addEventListener('mouseup', () => this.endDrag());
                document.addEventListener('touchend', () => this.endDrag());
            }
            
            startDrag(e, card) {
                e.preventDefault();
                e.stopPropagation();
                
                this.draggedItem = card;
                const rect = card.getBoundingClientRect();
                this.dragStartY = e.clientY || e.touches[0].clientY;
                this.dragOffsetY = this.dragStartY - rect.top;
                this.originalIndex = this.timerCards.indexOf(card);
                this.currentDropIndex = this.originalIndex;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                card.classList.add('dragging');
                card.style.position = 'fixed';
                card.style.width = rect.width + 'px';
                card.style.height = rect.height + 'px';
                card.style.left = rect.left + 'px';
                card.style.top = rect.top + 'px';
                card.style.zIndex = '1000';
                
                // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                this.createPlaceholder();
            }
            
            createPlaceholder() {
                this.placeholder = this.draggedItem.cloneNode(true);
                this.placeholder.classList.remove('dragging');
                this.placeholder.classList.add('placeholder');
                this.placeholder.style.opacity = '0.6';
                
                // –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
                const buttons = this.placeholder.querySelectorAll('button');
                buttons.forEach(btn => btn.style.visibility = 'hidden');
                const dragHandle = this.placeholder.querySelector('.drag-handle');
                if (dragHandle) dragHandle.style.visibility = 'hidden';
                
                this.container.insertBefore(this.placeholder, this.draggedItem);
            }
            
            drag(e) {
                if (!this.draggedItem) return;
                
                e.preventDefault();
                e.stopPropagation();
                
                const y = e.clientY || (e.touches && e.touches[0].clientY);
                if (!y) return;
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                const newY = y - this.dragOffsetY;
                this.draggedItem.style.top = newY + 'px';
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                const draggedRect = this.draggedItem.getBoundingClientRect();
                const draggedCenter = draggedRect.top + draggedRect.height / 2;
                
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π
                const otherCards = this.timerCards.filter(card => card !== this.draggedItem);
                
                let newIndex = this.originalIndex;
                
                for (let card of otherCards) {
                    const cardRect = card.getBoundingClientRect();
                    const cardCenter = cardRect.top + cardRect.height / 2;
                    const cardIndex = this.timerCards.indexOf(card);
                    
                    if (draggedCenter < cardCenter && cardIndex > newIndex) {
                        newIndex = cardIndex;
                        break;
                    } else if (draggedCenter > cardCenter && cardIndex < newIndex) {
                        newIndex = cardIndex;
                    }
                }
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (newIndex !== this.currentDropIndex) {
                    const targetElement = newIndex >= this.timerCards.length - 1 ? null : this.timerCards[newIndex + (newIndex > this.currentDropIndex ? 1 : 0)];
                    
                    if (targetElement && targetElement !== this.placeholder) {
                        this.container.insertBefore(this.placeholder, targetElement);
                    } else if (!targetElement && newIndex === this.timerCards.length - 1) {
                        this.container.appendChild(this.placeholder);
                    }
                    
                    this.currentDropIndex = newIndex;
                }
            }
            
            endDrag() {
                if (!this.draggedItem) return;
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
                if (this.placeholder && this.placeholder.parentNode) {
                    this.container.insertBefore(this.draggedItem, this.placeholder);
                    this.container.removeChild(this.placeholder);
                }
                
                // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∏ —Å—Ç–∏–ª–∏
                this.draggedItem.classList.remove('dragging');
                this.draggedItem.style.position = '';
                this.draggedItem.style.width = '';
                this.draggedItem.style.height = '';
                this.draggedItem.style.left = '';
                this.draggedItem.style.top = '';
                this.draggedItem.style.zIndex = '';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Ä—è–¥–∫–æ–≤
                this.timerCards = Array.from(this.container.querySelectorAll('.timer-card'));
                this.saveOrder();
                
                this.draggedItem = null;
                this.placeholder = null;
                this.currentDropIndex = -1;
                this.originalIndex = -1;
            }
            
            saveOrder() {
                const order = this.timerCards.map(card => card.getAttribute('data-id'));
                localStorage.setItem('timerOrder', JSON.stringify(order));
            }
            
            loadOrder() {
                const savedOrder = localStorage.getItem('timerOrder');
                if (savedOrder) {
                    const order = JSON.parse(savedOrder);
                    
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                    const sortedCards = [];
                    order.forEach(id => {
                        const card = this.container.querySelector(`[data-id="${id}"]`);
                        if (card) {
                            sortedCards.push(card);
                        }
                    });
                    
                    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                    this.container.innerHTML = '';
                    sortedCards.forEach(card => {
                        this.container.appendChild(card);
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Ä—è–¥–∫–æ–≤
                    this.timerCards = Array.from(this.container.querySelectorAll('.timer-card'));
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ç–∞–π–º–µ—Ä–æ–≤
        const timer1 = new Timer('timer1', 'start1', 'stop1', 'reset1', 'timer1State');
        const timer2 = new Timer('timer2', 'start2', 'stop2', 'reset2', 'timer2State');
        const timer3 = new Timer('timer3', 'start3', 'stop3', 'reset3', 'timer3State');
        const timer4 = new Timer('timer4', 'start4', 'stop4', 'reset4', 'timer4State');
        const timer5 = new Timer('timer5', 'start5', 'stop5', 'reset5', 'timer5State');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        const dragManager = new DragManager();
    </script>
</body>
</html>
